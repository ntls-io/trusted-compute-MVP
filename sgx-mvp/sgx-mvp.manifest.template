# Rust manifest with Python

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "{{ self_exe }}"
loader.log_level = "{{ log_level }}"

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}"

# See https://gramine.readthedocs.io/en/stable/performance.html#glibc-malloc-tuning
loader.env.MALLOC_ARENA_MAX = "1"

# Environment variables to specify Python configuration
loader.env.PYTHONHOME = "/usr"
loader.env.PYTHONPATH = "/usr/lib/python3.8:/usr/lib/python3.8/site-packages"
loader.env.PYTHONUNBUFFERED = "1"  # Ensures output is flushed immediately

# For easier debugging â€” not strictly required to run this workload
loader.env.RUST_BACKTRACE = "full"

fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "/usr", uri = "file:/usr" },  # Include Python libraries
  { path = "/usr/lib/python3.8", uri = "file:/usr/lib/python3.8" },  # Python interpreter path
  { path = "/usr/lib/ssl/certs", uri = "file:/usr/lib/ssl/certs" },
  { path = "/etc/ssl/certs", uri = "file:/etc/ssl/certs" },
  { type = "tmpfs", path = "/tmpfs"},
]

sgx.debug = true
sgx.enclave_size = "4G"   # Increase enclave size to 4GB

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ self_exe }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:test-data/",
  "file:/usr/bin/python3.8",  # Python executable
  "file:/usr/lib/python3.8/",  # Python standard libraries
  "file:/usr/lib/python3/dist-packages/",
  "file:build.rs",
  "file:etc/ssl/cacert.pem",
  "file:/usr/lib/ssl/certs/",
  "file:/etc/ssl/certs/",
]

loader.env.DATABASE_NAME = { passthrough = true }
loader.env.COLLECTION_NAME = { passthrough = true }
loader.env.COSMOSDB_URI = { passthrough = true }

sys.enable_extra_runtime_domain_names_conf = true

# The maximum number of threads in a single process needs to be declared in advance.
#   https://gramine.readthedocs.io/en/stable/manifest-syntax.html#number-of-threads
sgx.max_threads = {{ '1' if env.get('EDMM', '0') == '1' else '8' }}