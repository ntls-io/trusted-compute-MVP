{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#nautilus-documentation","title":"Nautilus Documentation","text":"<p>Welcome to the documentation for the Nautilus Trusted Compute MVP. This project implements secure data processing using Intel SGX enclaves.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Nautilus MVP provides:</p> <ul> <li>Secure data pooling and processing in SGX enclaves</li> <li>Remote attestation capabilities via Azure DCAP</li> <li>Support for both Python and WebAssembly workloads</li> <li>REST API interface for data operations</li> <li>Confidential computing guarantees through hardware-based isolation</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Follow the Installation Guide to set up your environment</li> <li>Learn about our API endpoints</li> <li>Understand attestation capabilities</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the GNU Affero General Public License v3.0 (AGPL-3.0).</p> <p>The full license can be found in the LICENSE file in the repository.</p>"},{"location":"api/overview/","title":"Overview","text":""},{"location":"api/overview/#overview","title":"Overview","text":"<p>The Nautilus MVP provides a REST API for interacting with the SGX enclave and performing secure data operations. All endpoints are served over HTTPS and support remote attestation (RA-TLS).</p>"},{"location":"api/overview/#base-url","title":"Base URL","text":"<pre><code>https://127.0.0.1:8080\n</code></pre>"},{"location":"api/overview/#authentication","title":"Authentication","text":"<p>Currently, the API does not require authentication. However, all connections must optionally pass SGX remote attestation verification.</p>"},{"location":"api/overview/#response-format","title":"Response Format","text":"<p>Responses are in JSON format, unless otherwise specified. The general structure is:</p> <pre><code>{\n    \"result\": {}, // Success response data\n    \"error\": \"\"   // Error message if applicable\n}\n</code></pre>"},{"location":"api/overview/#common-http-status-codes","title":"Common HTTP Status Codes","text":"<ul> <li><code>200 OK</code>: Request successful</li> <li><code>400 Bad Request</code>: Invalid request parameters</li> <li><code>500 Internal Server Error</code>: Server-side error</li> </ul>"},{"location":"api/overview/#api-endpoints","title":"API Endpoints","text":"Endpoint Method Description <code>/health</code> GET Health check endpoint <code>/create_data_pool</code> POST Create a new data pool <code>/append_data</code> POST Append data to existing pool <code>/execute_python</code> POST Execute Python script <code>/execute_wasm</code> POST Execute WASM binary"},{"location":"api/overview/#postman-collection","title":"Postman Collection","text":"<p>A Postman collection is available for testing. See the Postman Guide for details.</p>"},{"location":"api/endpoints/data-pool/","title":"Data Pool","text":""},{"location":"api/endpoints/data-pool/#data-pool-apis","title":"Data Pool APIs","text":"<p>The Data Pool APIs allow you to create and manage data pools within the SGX enclave.</p>"},{"location":"api/endpoints/data-pool/#create-data-pool","title":"Create Data Pool","text":"<p>Creates a new data pool with the provided data, pending DRT verification.</p>"},{"location":"api/endpoints/data-pool/#endpoint","title":"Endpoint","text":"<pre><code>POST /create_data_pool\n</code></pre>"},{"location":"api/endpoints/data-pool/#headers","title":"Headers","text":"<p>Content-Type: <code>application/json</code></p>"},{"location":"api/endpoints/data-pool/#request-body","title":"Request Body","text":"<pre><code>{\n    \"data\": {\n        \"Column_1\": [\n            \"value1\",\n            \"value2\",\n            \"value3\"\n        ],\n        \"Column_2\": [\n            \"valueA\",\n            \"valueB\",\n            \"valueC\"\n        ]\n    }\n}\n</code></pre>"},{"location":"api/endpoints/data-pool/#response","title":"Response","text":"<p>Success Response:</p> <p>Status Code: <code>200 OK</code></p> <p>Content:</p> <pre><code>Data sealed and saved successfully\n</code></pre>"},{"location":"api/endpoints/data-pool/#error-response","title":"Error Response","text":"<p>In case of server issues:</p> <p>Status Code: <code>500 Internal Server Error</code></p> <p>Content:</p> <pre><code>\"error\": \"Error message details\"\n</code></pre>"},{"location":"api/endpoints/data-pool/#append-data-pool","title":"Append Data Pool","text":"<p>Appends new data to an existing data pool, pending DRT verification.</p>"},{"location":"api/endpoints/data-pool/#endpoint_1","title":"Endpoint","text":"<pre><code>POST /append_data\n</code></pre>"},{"location":"api/endpoints/data-pool/#headers_1","title":"Headers","text":"<p>Content-Type: <code>application/json</code></p>"},{"location":"api/endpoints/data-pool/#request-body_1","title":"Request Body","text":"<pre><code>{\n    \"data\": {\n        \"Column_1\": [\n            \"new_value1\",\n            \"new_value2\"\n        ],\n        \"Column_2\": [\n            \"new_valueA\",\n            \"new_valueB\"\n        ]\n    }\n}\n</code></pre>"},{"location":"api/endpoints/data-pool/#response_1","title":"Response","text":"<p>Success Response:</p> <p>Status Code: <code>200 OK</code></p> <p>Content:</p> <pre><code>Data merged, sealed, and saved successfully\n</code></pre>"},{"location":"api/endpoints/data-pool/#error-response_1","title":"Error Response","text":"<p>In case of server issues:</p> <p>Status Code: <code>500 Internal Server Error</code></p> <p>Content:</p> <pre><code>\"error\": \"Error message details\"\n</code></pre>"},{"location":"api/endpoints/health/","title":"Health Check","text":""},{"location":"api/endpoints/health/#health-check-api","title":"Health Check API","text":"<p>A simple endpoint to verify that the server is running and responsive.</p>"},{"location":"api/endpoints/health/#endpoint","title":"Endpoint","text":"<pre><code>GET /health\n</code></pre>"},{"location":"api/endpoints/health/#headers","title":"Headers","text":"<p>None required</p>"},{"location":"api/endpoints/health/#response","title":"Response","text":"<p>Success Response:</p> <p>Status Code: <code>200 OK</code></p> <p>Content:</p> <pre><code>Server is running\n</code></pre>"},{"location":"api/endpoints/health/#error-response","title":"Error Response","text":"<p>In case of server issues:</p> <p>Status Code: <code>500 Internal Server Error</code></p> <p>Content:</p> <pre><code>\"error\": \"Error message details\"\n</code></pre>"},{"location":"api/endpoints/python-execution/","title":"Python Execution","text":""},{"location":"api/endpoints/python-execution/#python-execution-api","title":"Python Execution API","text":"<p>Execute Python scripts (hosted on GitHub) within the SGX enclave on the secured data pool. The script must be verified using its SHA256 hash before execution.</p>"},{"location":"api/endpoints/python-execution/#endpoint","title":"Endpoint","text":"<pre><code>POST /execute_python\n</code></pre>"},{"location":"api/endpoints/python-execution/#headers","title":"Headers","text":"<p>Content-Type: <code>application/json</code></p>"},{"location":"api/endpoints/python-execution/#request-body","title":"Request Body","text":"<pre><code>{\n    \"github_url\": \"URL to the Python script on GitHub\",\n    \"expected_hash\": \"SHA256 hash of the Python script\"\n}\n</code></pre>"},{"location":"api/endpoints/python-execution/#response","title":"Response","text":"<p>Success Response:</p> <p>Status Code: <code>200 OK</code></p> <p>Content:</p> <pre><code>{\n    \"result\": {\n        \"Column_1\": \"computed_value1\",\n        \"Column_2\": \"computed_value2\"\n    }\n}\n</code></pre>"},{"location":"api/endpoints/python-execution/#error-response","title":"Error Response","text":"<p>In case of server issues:</p> <p>Status Code: <code>500 Internal Server Error</code></p> <p>Content:</p> <pre><code>\"error\": \"Error message details\"\n</code></pre>"},{"location":"api/endpoints/wasm-execution/","title":"WASM Execution","text":""},{"location":"api/endpoints/wasm-execution/#webassembly-execution-api","title":"WebAssembly Execution API","text":"<p>Execute WebAssembly (WASM) binaries (hosted on GitHub) within the SGX enclave on the secured data pool. The binary must be verified using its SHA256 hash before execution. The API also requires the JSON schema.</p>"},{"location":"api/endpoints/wasm-execution/#endpoint","title":"Endpoint","text":"<pre><code>POST /execute_wasm\n</code></pre>"},{"location":"api/endpoints/wasm-execution/#headers","title":"Headers","text":"<p>Content-Type: <code>application/json</code></p>"},{"location":"api/endpoints/wasm-execution/#request-body","title":"Request Body","text":"<pre><code>{\n    \"github_url\": \"URL to the WASM binary on GitHub\",\n    \"expected_hash\": \"SHA256 hash of the WASM binary\",\n    \"json_schema\": ...\n}\n</code></pre>"},{"location":"api/endpoints/wasm-execution/#response","title":"Response","text":"<p>Success Response:</p> <p>Status Code: <code>200 OK</code></p> <p>Content:</p> <pre><code>{\n    \"result\": {\n        \"Column_1\": \"computed_value1\",\n        \"Column_2\": \"computed_value2\"\n    }\n}\n</code></pre>"},{"location":"api/endpoints/wasm-execution/#error-response","title":"Error Response","text":"<p>In case of server issues:</p> <p>Status Code: <code>500 Internal Server Error</code></p> <p>Content:</p> <pre><code>\"error\": \"Error message details\"\n</code></pre>"},{"location":"api/postman-collection/usage-guide/","title":"Postman Guide","text":""},{"location":"api/postman-collection/usage-guide/#postman-collection-guide","title":"Postman Collection Guide","text":"<p>This guide helps you get started with testing the Nautilus MVP APIs using Postman.</p>"},{"location":"api/postman-collection/usage-guide/#collection-overview","title":"Collection Overview","text":"<p>The Postman collection includes pre-configured requests for all API endpoints:</p> <ul> <li>Health Check</li> <li>Data Pool Creation</li> <li>Data Append</li> <li>Python Execution</li> <li>WASM Execution</li> </ul>"},{"location":"api/postman-collection/usage-guide/#setup-instructions","title":"Setup Instructions","text":""},{"location":"api/postman-collection/usage-guide/#1-import-collection","title":"1. Import Collection","text":""},{"location":"api/postman-collection/usage-guide/#11-locate-collection-file","title":"1.1 Locate Collection File","text":"<ul> <li>Find <code>postman/collection.json</code> in the repository</li> <li>This file contains all predefined API requests</li> </ul>"},{"location":"api/postman-collection/usage-guide/#12-import-into-postman","title":"1.2 Import into Postman","text":"<pre><code>   1. Open Postman\n   2. Click \"Import\" button\n   3. Drag and drop collection.json OR\n   4. Click \"Upload Files\" and select collection.json\n</code></pre>"},{"location":"api/postman-collection/usage-guide/#2-configure-environment","title":"2. Configure Environment","text":""},{"location":"api/postman-collection/usage-guide/#21-create-environment","title":"2.1 Create Environment","text":"<pre><code>   1. Click \"Environments\" in Postman\n   2. Click \"Create Environment\"\n   3. Name it \"Nautilus MVP\" or another suitable name\n</code></pre>"},{"location":"api/postman-collection/usage-guide/#22-set-variables","title":"2.2 Set Variables","text":"<pre><code>HOST: 127.0.0.1\nPORT: 8080\nBASE_URL: https://{{HOST}}:{{PORT}}\n</code></pre>"},{"location":"api/postman-collection/usage-guide/#using-the-collection","title":"Using the Collection","text":""},{"location":"api/postman-collection/usage-guide/#health-check","title":"Health Check","text":"<ol> <li>Request: <code>GET {{BASE_URL}}/health</code></li> <li>Expected Response: \"Server is running\"</li> <li>Purpose: Verify server availability</li> </ol> <pre><code>// Example Response\nServer is running\n</code></pre>"},{"location":"api/postman-collection/usage-guide/#create-data-pool","title":"Create Data Pool","text":"<ol> <li>Request: <code>POST {{BASE_URL}}/create_data_pool</code></li> <li>Body Example: <pre><code>{\n    \"data\": {\n        \"temperature\": [20.5, 21.0, 22.1],\n        \"humidity\": [45, 48, 52]\n    }\n}\n</code></pre></li> </ol>"},{"location":"api/postman-collection/usage-guide/#append-data","title":"Append Data","text":"<ol> <li>Request: <code>POST {{BASE_URL}}/append_data</code></li> <li>Body Example: <pre><code>{\n    \"data\": {\n        \"temperature\": [22.5, 23.0],\n        \"humidity\": [49, 51]\n    }\n}\n</code></pre></li> </ol>"},{"location":"api/postman-collection/usage-guide/#execute-python","title":"Execute Python","text":"<ol> <li>Request: <code>POST {{BASE_URL}}/execute_python</code></li> <li>Body Example: <pre><code>{\n  \"github_url\": \"https://github.com/ntls-io/Python-Scripts-MVP/blob/main/calculate_mean.py\",\n  \"expected_hash\": \"d1bb84ecf1f107013df0fe5ea8a63c15bbd673a81a13a6871c6b43d7e85fd690\"\n}\n</code></pre></li> </ol>"},{"location":"api/postman-collection/usage-guide/#execute-wasm","title":"Execute WASM","text":"<ol> <li>Request: <code>POST {{BASE_URL}}/execute_wasm</code></li> <li>Body Example: <pre><code>{\n  \"github_url\": \"https://github.com/ntls-io/WASM-Binaries-MVP/blob/master/bin/get_mean_wasm.wasm\",\n  \"expected_hash\": \"b5ee81a20256dec2bd3db6e673b11eadae4baf8fafbe68cec1f36517bb569255\",\n  \"json_schema\": {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"Column_1\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"Column_2\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"number\"\n                }\n            }\n        },\n        \"required\": [\n            \"Column_1\",\n            \"Column_2\"\n        ]\n    }\n}\n</code></pre></li> </ol>"},{"location":"api/postman-collection/usage-guide/#testing-workflows","title":"Testing Workflows","text":""},{"location":"api/postman-collection/usage-guide/#basic-workflow","title":"Basic Workflow","text":""},{"location":"api/postman-collection/usage-guide/#1-health-check","title":"1. Health Check","text":"<ul> <li>Verify server is running</li> <li>Check attestation is working</li> </ul>"},{"location":"api/postman-collection/usage-guide/#2-data-operations","title":"2. Data Operations","text":"<pre><code>1. Create initial data pool\n2. Append additional data\n3. Verify data through computation\n</code></pre>"},{"location":"api/postman-collection/usage-guide/#3-computation-tests","title":"3. Computation Tests","text":"<pre><code>1. Run Python analysis\n2. Run WASM analysis\n3. Compare results\n</code></pre>"},{"location":"api/postman-collection/usage-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/postman-collection/usage-guide/#common-issues","title":"Common Issues","text":""},{"location":"api/postman-collection/usage-guide/#1-ssltls-errors","title":"1. SSL/TLS Errors","text":"<ul> <li>Solution: Disable SSL verification in Postman</li> <li>Note: Only for development/testing</li> </ul>"},{"location":"api/postman-collection/usage-guide/#2-connection-refused","title":"2. Connection Refused","text":"<ul> <li>Check server status</li> <li>Verify port number</li> </ul>"},{"location":"api/postman-collection/usage-guide/#3-invalid-responses","title":"3. Invalid Responses","text":"<ul> <li>Verify JSON format</li> <li>Check content-type headers</li> <li>Validate data structure</li> </ul>"},{"location":"attestation/client-setup/","title":"Client Setup","text":""},{"location":"attestation/client-setup/#attestation-client-setup","title":"Attestation Client Setup","text":"<p>This guide covers the setup and configuration of the attestation client for verifying SGX enclaves.</p>"},{"location":"attestation/client-setup/#environment-setup","title":"Environment Setup","text":"<ol> <li> <p>Azure DCAP Configuration</p> <pre><code># Set DCAP version\nexport AZDCAP_COLLATERAL_VERSION=v4\n\n# Set log level\nexport AZDCAP_DEBUG_LOG_LEVEL=ERROR\n\n# Development flags, see Gramine documentation for more information\nexport RA_TLS_ALLOW_DEBUG_ENCLAVE_INSECURE=1\nexport RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1\nexport RA_TLS_ALLOW_HW_CONFIG_NEEDED=1\nexport RA_TLS_ALLOW_SW_HARDENING_NEEDED=1\n</code></pre> </li> <li> <p>AESM Service</p> <pre><code># Check service status\nsudo systemctl status aesmd.service\n\n# Restart service if needed\nsudo systemctl restart aesmd.service\n</code></pre> </li> </ol>"},{"location":"attestation/client-setup/#building-the-client","title":"Building the Client","text":"<pre><code>make attest\n</code></pre>"},{"location":"attestation/client-setup/#client-usage","title":"Client Usage","text":"<ol> <li> <p>Quote Generation <pre><code># Extract enclave measurements\ngramine-sgx-sigstruct-view sgx-mvp.sig\n</code></pre></p> </li> <li> <p>Measurement Verification <pre><code># Check specific measurements\n[APPLICATION_PORT=... APPLICATION_HOST=...] ./attest dcap &lt;mrenclave&gt; &lt;mrsigner&gt; &lt;isv_prod_id&gt; &lt;isv_svn&gt;\n</code></pre></p> </li> <li> <p>Example Verification</p> <pre><code>APPLICATION_HOST=127.0.0.1 APPLICATION_PORT=8080 ./attest dcap b6b4ed529d21daad3180cde2759bf7f6b0533b4b78f02ffdf48158e80b48c421 0d75a9bcadf105daec4c45f7cde9ebbf6af1aea9436d5ca259fb84efd51460ac 0 0\n</code></pre> <p>Expected Output:</p> <pre><code>[ using our own SGX-measurement verification callback (via command line options) ]\n  - ignoring ISV_PROD_ID\n  - ignoring ISV_SVN\n\n  . Seeding the random number generator... ok\n  . Connecting to tcp/127.0.0.1/8080... ok\n  . Setting up the SSL/TLS structure... ok\n  . Setting certificate verification mode for RA-TLS... ok\n  . Installing RA-TLS callback ... ok\n  . Performing the SSL/TLS handshake... Allowing quote status SW_HARDENING_NEEDED\n  . Handshake completed... ok\n  . Verifying peer X.509 certificate... ok\n  &gt; Write to server: 46 bytes written\n\nGET /health HTTP/1.1\nHost: 127.0.0.1:8080\n\n  &lt; Read from server: 119 bytes read\n\nHTTP/1.1 200 OK\ncontent-length: 17\ncontent-type: text/plain\ndate: Wed, 20 Nov 2024 08:23:58 GMT\n\nServer is running\nConnection closed by server after receiving data\n</code></pre> </li> </ol>"},{"location":"attestation/client-setup/#docker-container-attestation","title":"Docker Container Attestation","text":"<ol> <li> <p>Build Container and Get Signature</p> <p>Check Docker Deployment Guide for complete instructions on building and setting up the Docker environment.</p> <pre><code>cd sgx-mvp/docker\n# Build container - this will also create docker-sgx-mvp.sig\n./build.sh ubuntu20\n</code></pre> </li> <li> <p>View Container Measurements</p> <pre><code># View signature details\ngramine-sgx-sigstruct-view docker-sgx-mvp.sig\n</code></pre> </li> <li> <p>Verify Container</p> <pre><code># Using measurements from docker container\n./attest dcap &lt;mrenclave&gt; &lt;mrsigner&gt; &lt;isv_prod_id&gt; &lt;isv_svn&gt;\n</code></pre> </li> </ol>"},{"location":"attestation/guide/","title":"Guide","text":""},{"location":"attestation/guide/#remote-attestation-guide","title":"Remote Attestation Guide","text":"<p>This guide explains the Remote Attestation (RA) process in the Nautilus MVP using Intel SGX and Azure DCAP.</p>"},{"location":"attestation/guide/#overview","title":"Overview","text":"<p>Remote Attestation allows a remote party to verify that:</p> <ol> <li>The application is running in a genuine Intel SGX enclave</li> <li>The code hasn't been tampered with</li> <li>The platform can be trusted</li> </ol>"},{"location":"attestation/guide/#key-components","title":"Key Components","text":"<ol> <li> <p>SGX Quote</p> <ul> <li>Contains enclave measurements (MRENCLAVE, MRSIGNER)</li> <li>Platform security version numbers</li> </ul> </li> <li> <p>Azure DCAP</p> <ul> <li>Provides attestation collateral</li> <li>Verifies platform TCB status</li> <li>Manages quote generation</li> </ul> </li> <li> <p>Measurements</p> <ul> <li>MRENCLAVE: Unique identity of code and data</li> <li>MRSIGNER: Identity of enclave signer</li> <li>ISV_PROD_ID: Product ID</li> <li>ISV_SVN: Security version number</li> </ul> </li> </ol>"},{"location":"installation/docker-deployment/","title":"Docker Deployment","text":""},{"location":"installation/docker-deployment/#docker-deployment-guide","title":"Docker Deployment Guide","text":"<p>This guide explains how to build and run the Nautilus SGX MVP using Docker containers.</p>"},{"location":"installation/docker-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before deploying the Nautilus MVP with Docker, ensure your system meets the following requirements:</p>"},{"location":"installation/docker-deployment/#system-requirements","title":"System Requirements","text":"<ul> <li>Ubuntu 20.04</li> <li>Intel CPU with SGX support</li> <li>Docker installed</li> <li>Support for DCAP attestation</li> </ul>"},{"location":"installation/docker-deployment/#required-components","title":"Required Components","text":"<ol> <li> <p>Docker Environment</p> <ul> <li>Docker Engine</li> <li>SGX device drivers mounted</li> </ul> <pre><code># Verify Docker installation\ndocker --version\n\n# Check SGX devices\nls /dev/sgx*\n</code></pre> </li> <li> <p>Signing Key Setup</p> <p>Generate a development signing key:</p> <pre><code>gramine-sgx-gen-private-key /keys/enclave-key.pem\nchmod 400 /keys/enclave-key.pem\n</code></pre> <p>Production Environment</p> <p>For production environments, use your production signing key instead of generating a new one.</p> </li> </ol>"},{"location":"installation/docker-deployment/#build-instructions","title":"Build Instructions","text":"<ol> <li> <p>Navigate to Docker Directory</p> <pre><code>cd sgx-mvp/docker\n</code></pre> </li> <li> <p>Build Docker Image</p> <p>For Ubuntu 20.04: <pre><code>sudo ./build.sh ubuntu20\n</code></pre></p> </li> <li> <p>Run Container</p> <pre><code>sudo docker run -p 8080:8081 \\\n    --device=/dev/sgx_enclave \\\n    --device=/dev/sgx_provision \\\n    sgx-mvp:stable-focal\n</code></pre> </li> </ol>"},{"location":"installation/docker-deployment/#verification-steps","title":"Verification Steps","text":"<ol> <li> <p>Check Container Status</p> <pre><code>docker ps\n</code></pre> </li> <li> <p>Verify Service Health</p> <pre><code>curl -k https://localhost:8080/health ; echo\n</code></pre> </li> <li> <p>AESM Service</p> <p>The container automatically handles the AESM service startup through the <code>/restart_aesm.sh</code> script, so no manual verification is needed.</p> </li> </ol>"},{"location":"installation/docker-deployment/#configuration","title":"Configuration","text":""},{"location":"installation/docker-deployment/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>HOST</code>: Service host address (default: 127.0.0.1)</li> <li><code>PORT</code>: Internal service port (default: 8080)</li> </ul>"},{"location":"installation/docker-deployment/#port-mappings","title":"Port Mappings","text":"<ul> <li>Internal port: 8080</li> <li>External port: 8081 (configurable via Docker run command)</li> </ul>"},{"location":"installation/sgx-mvp/","title":"SGX MVP Installation Guide","text":""},{"location":"installation/sgx-mvp/#sgx-mvp-installation-guide","title":"SGX MVP Installation Guide","text":""},{"location":"installation/sgx-mvp/#prerequisites","title":"Prerequisites","text":"<p>Before installing the Nautilus MVP, ensure your system meets the following requirements:</p>"},{"location":"installation/sgx-mvp/#system-requirements","title":"System Requirements","text":"<ul> <li>Ubuntu 20.04</li> <li>Intel CPU with SGX support</li> <li>Support for DCAP attestation (e.g. Azure)</li> </ul>"},{"location":"installation/sgx-mvp/#required-software","title":"Required Software","text":"<ol> <li> <p>Python Environment</p> <ul> <li>Python 3.8</li> <li>Python development packages</li> </ul> <pre><code>sudo apt-get update\nsudo apt-get install libffi-dev\nsudo apt-get install python3.8-dev\nsudo apt-get install python3-numpy python3-scipy\n</code></pre> </li> <li> <p>Gramine</p> <p>Follow the instructions in the Gramine Installation Guide under \"Install Gramine packages\" and Prepare a signing key.</p> <pre><code>gramine-sgx-gen-private-key keys/enclave-key.pem\nchmod 400 keys/enclave-key.pem\n</code></pre> </li> <li> <p>Rust Environment</p> <pre><code># Install Rust using rustup\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource $HOME/.cargo/env\n</code></pre> </li> <li> <p>General Dependencies</p> <pre><code>sudo apt-get update\nsudo apt-get install -y libssl-dev ca-certificates\n</code></pre> </li> <li> <p>Install Azure DCAP Attestation dependancies</p> <pre><code>wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add\nsudo add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/ubuntu/`lsb_release -rs`/prod `lsb_release -cs` main\"\nsudo apt install az-dcap-client\n\nsudo apt update\nsudo apt-get install pkg-config\nsudo apt install sgx-aesm-service libsgx-aesm-ecdsa-plugin libsgx-aesm-quote-ex-plugin\n</code></pre> <p>The AESM service should be up and running. To confirm that, use:</p> <pre><code>sudo systemctl status aesmd.service\n</code></pre> <p>Setup Azure DCAP:</p> <pre><code>export AZDCAP_COLLATERAL_VERSION=v4\nexport AZDCAP_DEBUG_LOG_LEVEL=Info\nexport RA_TLS_ALLOW_DEBUG_ENCLAVE_INSECURE=1\nexport RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1\nexport RA_TLS_ALLOW_HW_CONFIG_NEEDED=1\nexport RA_TLS_ALLOW_SW_HARDENING_NEEDED=1\n</code></pre> <p>Make sure to always restart the <code>aesmd.service</code> after updating the configuration:</p> <pre><code>sudo systemctl restart aesmd.service\n</code></pre> </li> </ol>"},{"location":"installation/sgx-mvp/#verification-steps","title":"Verification Steps","text":"<ol> <li> <p>Check Python Version</p> <pre><code>python3 --version  # Should show 3.8.x\n</code></pre> </li> <li> <p>Verify Rust installation</p> <pre><code>rustc --version\ncargo --version\n</code></pre> </li> <li> <p>Check SGX compatibility (Gramine)</p> <p>Gramine docs</p> <pre><code>is-sgx-available\n</code></pre> </li> </ol>"},{"location":"installation/sgx-mvp/#sgx-setup","title":"SGX Setup","text":"<p>Ensure you have a Gramine signing key</p> <ol> <li> <p>Manifest Configuration</p> <p>Check the paths in <code>sgx-mvp.manifest.template</code> and modify if necessary.</p> </li> <li> <p>Build Instructions</p> <pre><code>make SGX=1 mvp RA_TYPE=dcap\n</code></pre> </li> <li> <p>Run NTLS MVP</p> <pre><code>gramine-sgx sgx-mvp\n</code></pre> </li> </ol>"}]}